rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // 1. 권한 확인 헬퍼
    function isAdminEmail() {
      return request.auth != null &&
             request.auth.token.email in [
               'mistarcodm@gmail.com'
             ];
    }

    function isAdmin() {
      // Firestore의 role 확인
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function roleNotChanged() {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']);
    }

    function isCourseInstructor(courseId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/courses/$(courseId)).data.instructorId == request.auth.uid;
    }

    function isEnrolledInCourse(courseId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/enrollments/$(courseId + '_' + request.auth.uid));
    }

    // 2. 공지사항 (모두 읽기, 관리자만 쓰기)
    match /notices/{noticeId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // 3. 강의 (모두 읽기, 관리자만 쓰기)
    match /courses/{courseId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /courses/{courseId}/assignments/{assignmentId} {
      allow read: if isAuthenticated() && (isAdmin() || isCourseInstructor(courseId) || isEnrolledInCourse(courseId));
      allow create, update, delete: if isAdmin() || isCourseInstructor(courseId);
    }

    // 4. 사용자 데이터 (본인/관리자만 접근)
    match /users/{userId} {
      // 읽기: 인증된 사용자 모두 (프로필 정보 조회용)
      allow read: if isAuthenticated();
      // 생성: 본인만 가능
      allow create: if isAuthenticated() && isOwner(userId);
      // 업데이트: 본인은 자신의 정보만, 역할 변경은 불가 / 관리자는 전체
      allow update: if (isOwner(userId) && roleNotChanged()) || isAdmin();
      // 삭제: 관리자만
      allow delete: if isAdmin();
    }

    // 5. 관리자 전용 컬렉션
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }

    // 6. 수강 신청 (본인/관리자 접근)
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() &&
                     (enrollmentId.matches('.*_' + request.auth.uid) || 
                      resource.data.userId == request.auth.uid || 
                      isAdmin());
      allow create: if isAuthenticated() &&
                       (request.resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAuthenticated() &&
                       (enrollmentId.matches('.*_' + request.auth.uid) || 
                        resource.data.userId == request.auth.uid || 
                        isAdmin());
      allow delete: if isAdmin();
    }

    // 8. 신청서 (본인/관리자 접근)
    match /applications/{applicationId} {
      allow read: if isAuthenticated() &&
                     (isAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // 9. 문의하기 (모두 생성 가능, 관리자만 읽기)
    match /contacts/{contactId} {
      allow read: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    // 10. 로그 (읽기 전용)
    match /logs/{logId} {
      allow read: if isAdmin();
      allow write: if false;
    }
  }
}